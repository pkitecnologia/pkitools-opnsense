#!/usr/bin/env python3
"""
netdiscover - Extract network interface and gateway information from OPNsense config

Usage:
  netdiscover <mode> [config_path]

  mode: 'interfaces' or 'gateways' (required)
  config_path: Path to config.xml (optional, default: /conf/config.xml)

  - interfaces: Output only if_* fields for all enabled interfaces
  - gateways: Output all fields only for interfaces that have gateways attached
"""

import json
import subprocess
import sys
from lxml import etree


def get_text(element, tag):
    """Get text from XML element, return None if empty or not found."""
    elem = element.find(tag)
    if elem is None:
        return None
    text = elem.text
    if text is None or text.strip() == '':
        return None
    return text.strip()


def get_dhcp_ip(if_name):
    """Get IP address for DHCP interface using ifconfig."""
    try:
        result = subprocess.run(['ifconfig', if_name],
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            # Parse ifconfig output for inet address
            for line in result.stdout.split('\n'):
                line = line.strip()
                if line.startswith('inet '):
                    parts = line.split()
                    if len(parts) >= 2:
                        # Return first IP address (parts[1])
                        return parts[1]
    except Exception:
        pass
    return None


def get_dhcp_gateway(if_name):
    """Get gateway for DHCP interface from /tmp/<if_name>_router."""
    try:
        with open(f'/tmp/{if_name}_router', 'r') as f:
            gateway = f.read().strip()
            if gateway:
                return gateway
    except Exception:
        pass
    return None


def parse_config(config_path='/conf/config.xml', mode='interfaces'):
    """Parse OPNsense config and extract interface/gateway information."""
    try:
        # Use sudo to read the config file if it's the default path
        if config_path == '/conf/config.xml':
            result = subprocess.run(['sudo', 'cat', config_path],
                                  capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                print(f"Error reading config file: {result.stderr}", file=sys.stderr)
                sys.exit(1)
            root = etree.fromstring(result.stdout.encode())
        else:
            # For testing with alternative paths, read directly
            tree = etree.parse(config_path)
            root = tree.getroot()
    except Exception as e:
        print(f"Error parsing config file: {e}", file=sys.stderr)
        sys.exit(1)

    # Parse interfaces
    interfaces = {}
    interfaces_elem = root.find('interfaces')
    if interfaces_elem is None:
        return []

    for iface_elem in interfaces_elem:
        iface_tag = iface_elem.tag

        # Check if interface is enabled
        enabled = get_text(iface_elem, 'enable')
        if enabled != '1':
            continue

        if_name = get_text(iface_elem, 'if')
        if not if_name:
            continue

        if_descr = get_text(iface_elem, 'descr')
        if_addr = get_text(iface_elem, 'ipaddr')

        # Handle DHCP interfaces (ipaddr set to "dhcp")
        is_dhcp = if_addr == 'dhcp'
        if is_dhcp:
            if_addr = get_dhcp_ip(if_name)

        # Build interface info
        iface_info = {
            'if_name': if_name,
            'tag': iface_tag,  # Store tag for gateway matching
            'is_dhcp': is_dhcp
        }

        if if_descr:
            iface_info['if_descr'] = if_descr
        if if_addr:
            iface_info['if_addr'] = if_addr

        interfaces[iface_tag] = iface_info

    # Parse gateways
    gateways = {}
    gateways_elem = root.find('.//OPNsense/Gateways')
    if gateways_elem is not None:
        for gw_elem in gateways_elem.findall('gateway_item'):
            # Check if gateway is disabled
            disabled = get_text(gw_elem, 'disabled')
            if disabled == '1':
                continue

            iface_tag = get_text(gw_elem, 'interface')
            if not iface_tag:
                continue

            gw_name = get_text(gw_elem, 'name')
            gw_descr = get_text(gw_elem, 'descr')
            gw_gateway = get_text(gw_elem, 'gateway')
            gw_monitor = get_text(gw_elem, 'monitor')

            gw_info = {}
            if gw_name:
                gw_info['gw_name'] = gw_name
            if gw_descr:
                gw_info['gw_descr'] = gw_descr
            if gw_gateway:
                gw_info['gw_gateway'] = gw_gateway
            if gw_monitor:
                gw_info['gw_monitor'] = gw_monitor

            if gw_info:  # Only add if we have at least some gateway info
                gateways[iface_tag] = gw_info

    # Combine interface and gateway information based on mode
    results = []

    if mode == 'interfaces':
        # Output only if_* fields for all enabled interfaces
        for iface_tag, iface_info in interfaces.items():
            output = {
                'if_name': iface_info.get('if_name', ''),
                'if_descr': iface_info.get('if_descr', ''),
                'if_addr': iface_info.get('if_addr', '')
            }
            results.append(output)

    elif mode == 'gateways':
        # Output all fields only for interfaces with gateways
        for iface_tag, iface_info in interfaces.items():
            # Only include interfaces that have a gateway
            if iface_tag not in gateways:
                continue

            output = {
                'gw_gateway': '',
                'if_name': iface_info.get('if_name', ''),
                'if_descr': iface_info.get('if_descr', ''),
                'if_addr': iface_info.get('if_addr', ''),
                'gw_name': '',
                'gw_descr': '',
                'gw_monitor': ''
            }

            # Add gateway info
            gw_info = gateways[iface_tag]

            # Handle DHCP gateway
            is_dhcp = iface_info.get('is_dhcp', False)
            if is_dhcp and 'gw_gateway' not in gw_info:
                dhcp_gw = get_dhcp_gateway(iface_info.get('if_name'))
                if dhcp_gw:
                    gw_info['gw_gateway'] = dhcp_gw

            # Update gateway fields
            if 'gw_name' in gw_info:
                output['gw_name'] = gw_info['gw_name']
            if 'gw_descr' in gw_info:
                output['gw_descr'] = gw_info['gw_descr']
            if 'gw_gateway' in gw_info:
                output['gw_gateway'] = gw_info['gw_gateway']
            if 'gw_monitor' in gw_info:
                output['gw_monitor'] = gw_info['gw_monitor']

            results.append(output)

    else:
        print(f"Error: Invalid mode '{mode}'. Use 'interfaces' or 'gateways'.", file=sys.stderr)
        sys.exit(1)

    return results


def main():
    """Main entry point."""
    # Parse command line arguments
    if len(sys.argv) < 2:
        print("Usage: netdiscover <mode> [config_path]", file=sys.stderr)
        print("  mode: 'interfaces' or 'gateways' (required)", file=sys.stderr)
        print("  config_path: Path to config.xml (optional, default: /conf/config.xml)", file=sys.stderr)
        sys.exit(1)

    mode = sys.argv[1]
    config_path = sys.argv[2] if len(sys.argv) > 2 else '/conf/config.xml'

    results = parse_config(config_path, mode)
    print(json.dumps(results, indent=2))


if __name__ == '__main__':
    main()
