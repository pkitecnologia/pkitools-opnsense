#!/bin/sh
# Usage:
#   $0 latency DESTINATION [SOURCE]
#   $0 loss    DESTINATION [SOURCE]
# Output:
#   latency -> average RTT in ms (number), or 0 if unavailable
#   loss    -> packet loss percent as integer 0..100, or 100 if unavailable
#
# DESTINATION format: ip/interface or /interface
# If IP is absent (e.g., /interface), gateway IP is resolved from interface

OP="$1"
DEST="$2"
SRC="$3"

[ -n "$OP" ] && [ -n "$DEST" ] || {
    echo "usage: $0 {latency|loss} DESTINATION [SOURCE]" >&2
    exit 1
}

# Binaries (adjust paths if needed)
PING="/sbin/ping"
GREP="/usr/bin/grep"
AWK="/usr/bin/awk"
SED="/usr/bin/sed"
XMLLINT="/usr/local/bin/xmllint"
SUDO="/usr/local/bin/sudo"

# Parse DESTINATION parameter (ip/interface format)
IP_PART=""
INTERFACE_PART=""

case "$DEST" in
    */*)
        IP_PART="${DEST%%/*}"
        INTERFACE_PART="${DEST##*/}"
        ;;
    *)
        echo "Invalid DESTINATION format. Use ip/interface or /interface" >&2
        exit 1
        ;;
esac

# Resolve destination IP
if [ -z "$IP_PART" ] || [ "$IP_PART" = "null" ]; then
    # No IP provided, need to resolve from interface
    if [ -z "$INTERFACE_PART" ]; then
        echo "No interface specified in DESTINATION" >&2
        exit 1
    fi

    # Get physical interface name from config
    PHYSICAL_INTERFACE=$($SUDO $XMLLINT --xpath "/opnsense/interfaces/$INTERFACE_PART/if/text()" /conf/config.xml 2>/dev/null)

    if [ -z "$PHYSICAL_INTERFACE" ]; then
        echo "Unable to resolve physical interface for $INTERFACE_PART" >&2
        exit 1
    fi

    # Look up gateway IP from temp file
    GATEWAY_FILE="/tmp/${PHYSICAL_INTERFACE}_router"

    if [ ! -f "$GATEWAY_FILE" ]; then
        echo "Gateway file $GATEWAY_FILE not found" >&2
        exit 1
    fi

    TARGET_IP=$(cat "$GATEWAY_FILE" 2>/dev/null | head -n1)

    if [ -z "$TARGET_IP" ]; then
        echo "Unable to read gateway IP from $GATEWAY_FILE" >&2
        exit 1
    fi
else
    # Use provided IP
    TARGET_IP="$IP_PART"
fi

# Build ping params (quiet)
PPARAM="-q"
# Choose -S (source address) if SRC looks like IP, else -I (interface)
if [ -n "$SRC" ]; then
    case "$SRC" in
        *.*|*:* ) PPARAM="$PPARAM -S $SRC" ;;
        * )       PPARAM="$PPARAM -I $SRC" ;;
    esac
fi

case "$OP" in
    latency)
        # 5 probes, default interval
        OUT=$($PING $PPARAM -c 5 "$TARGET_IP" 2>/dev/null)

        # Works with FreeBSD ping "round-trip min/avg/max/stddev = a/b/c/d ms"
        # (and many Linux pings that print "rtt min/avg/max/mdev = ...")
        AVG=$(echo "$OUT" \
            | $GREP -E "round-trip|rtt" \
            | $AWK -F'=' '{ if (NF>1) {gsub(/^[[:space:]]+|[[:space:]]+$/,"",$2); print $2} }' \
            | $AWK -F'/' '{ gsub(/[[:space:]]*ms.*/,"",$2); print $2 }')

        if [ -z "$AVG" ]; then
            echo 0
        else
            echo "$AVG"
        fi
        ;;

    loss)
        # 50 probes, 100ms interval
        OUT=$($PING $PPARAM -c 50 -i 0.1 "$TARGET_IP" 2>/dev/null)

        # Extract "<num>% packet loss" (with optional decimal)
        LOSS=$(echo "$OUT" \
            | $GREP "packet loss" \
            | $AWK '{for(i=1;i<=NF;i++) if($i ~ /%$/){sub("%","",$i); loss=$i}} END{if(loss=="") exit 1; print int(loss+0.5)}')

        if [ -z "$LOSS" ]; then
            echo 100
        else
            echo "$LOSS"
        fi
        ;;
    *)
        echo "unknown op: $OP (use 'latency' or 'loss')" >&2
        exit 2
        ;;
esac
